#!/bin/sh

installCodeExtension()
{
    packageName="$1"
    prettyName="${packageName##*.}"

    if [ -z "$packageName" ]; then
        echo "[ERROR] No package name provided."
        return 1
    fi

    if ! codeOutput=$(code --install-extension "$packageName" 2>&1); then
        echo "[FAILED] Failed to install $prettyName:"
        echo "$codeOutput"
        return 1
    fi

    if echo "$codeOutput" | grep -q "already installed"; then
        echo " - [EXISTING] $prettyName"
    else
        echo " - [INSTALLED] $prettyName"
    fi
}

isInstalled()
{
    package="$1"

    if dpkg -s "$package" >/dev/null 2>&1; then
        return 0 
    fi

    if command -v "$package" >/dev/null 2>&1; then
        return 0
    fi

    return 1
}

checkInstalled() {
    package="$1"

    if isInstalled "$package"; then
        echo " - [OK] $package"
    else
        if apt-cache show "$package" >/dev/null 2>&1; then
            echo " - [MISSING] $package (→ sudo apt-get install $package)"
        else
            echo " - [MISSING] $package (→ manual installation required)"
        fi
    fi
}


updateVSCodeSetting() {
    key="$1"
    value="$2"
    settings_path="$HOME/.config/Code/User/settings.json"

    [ ! -f "$settings_path" ] && echo "{}" > "$settings_path"


    if echo "$value" | grep -E '^(true|false|[0-9]+)$' > /dev/null; then
        json_value="$value"
    else
        json_value="\"$value\""
    fi

    tmp=$(mktemp)
    jq --arg key "$key" --argjson val "$json_value" '. + {($key): $val}' "$settings_path" > "$tmp" && mv "$tmp" "$settings_path"
}

backupVSCodeSettings() {
    settings="$HOME/.config/Code/User/settings.json"
    backup_base="${settings}.bak"
    backup="$backup_base"

    if [ ! -f "$settings" ]; then
        return 1
    fi

    echo "Making backup of your VSCode Config !"

    i=1
    while [ -f "$backup" ]; do
        backup="${backup_base}.${i}"
        i=$(expr "$i" + 1)
    done

    cp "$settings" "$backup"
}


register_new_gnome_keyboard_shortcut()
{
    binding_identifier="$1"
    binding_name="$2"
    binding_command="$3"
    binding_binding="$4"

    echo "Making new shortcut with"
    echo " - identifier: $binding_identifier"
    echo " - name: $binding_name"
    echo " - command: $binding_command"
    echo " - binding: $binding_binding"

    existing=$(gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings)

    new_binding="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/$binding_identifier/"
    escaped_new_binding=$(echo "$new_binding" | sed 's/\//\\\//g' )

    if echo "$existing" | grep -q "$new_binding"; then
        echo "$binding_identifier is already present in your system, overwriting it..."
    else
        echo "Adding the shortcut to gsettings"
        if [ "$existing" = "@as []" ]; then
            gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['$new_binding']"
        else
            updated=$(echo "$existing" | sed "s/]$/, '$escaped_new_binding']/g")
            gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "$updated"
        fi

    fi
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$new_binding name "$binding_name"
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$new_binding command "$binding_command"
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$new_binding binding "$binding_binding"

}

echo "Languages/tools to install";
checkInstalled "jq";
checkInstalled "git";
checkInstalled "curl";
checkInstalled "php";
checkInstalled "composer"
checkInstalled "sqlite3";
checkInstalled "nodejs";
checkInstalled "npm";
checkInstalled "docker";
checkInstalled "docker-compose-plugin";
echo

echo "Software to install";
checkInstalled "filezilla";
checkInstalled "code";
checkInstalled "firefox";
checkInstalled "ffmpeg";
echo

echo "Office Softwares"
checkInstalled "libreoffice";
checkInstalled "gimp";
checkInstalled "inkscape";
echo

echo "DVD/Music Utilities"
checkInstalled "easytag";
checkInstalled "asunder";
echo


if isInstalled 'code'; then

    # Regenerate with
    # code --list-extensions | awk '{print "installCodeExtension \"" $1 "\""}'
    if utilux-prompt --prompt "Install Visual Studio Code extensions ?"; then
        echo "Checking code extensions..."
        installCodeExtension "adpyke.vscode-sql-formatter"
        installCodeExtension "antfu.goto-alias"
        installCodeExtension "bmewburn.vscode-intelephense-client"
        installCodeExtension "bradlc.vscode-tailwindcss"
        installCodeExtension "davidanson.vscode-markdownlint"
        installCodeExtension "dbaeumer.vscode-eslint"
        installCodeExtension "github.copilot"
        installCodeExtension "github.copilot-chat"
        installCodeExtension "github.github-vscode-theme"
        installCodeExtension "gruntfuggly.todo-tree"
        installCodeExtension "hallerpatrick.solarized-autumn"
        installCodeExtension "irongeek.vscode-env"
        installCodeExtension "johnpapa.vscode-peacock"
        installCodeExtension "mechatroner.rainbow-csv"
        installCodeExtension "mhutchie.git-graph"
        installCodeExtension "miguelsolorio.min-theme"
        installCodeExtension "ms-azuretools.vscode-containers"
        installCodeExtension "ms-python.debugpy"
        installCodeExtension "ms-python.python"
        installCodeExtension "ms-python.vscode-pylance"
        installCodeExtension "ms-vscode-remote.remote-containers"
        installCodeExtension "mujichok.vscode-project-name-in-statusbar"
        installCodeExtension "nuxt.mdc"
        installCodeExtension "nuxtr.nuxt-vscode-extentions"
        installCodeExtension "nuxtr.nuxtr-vscode"
        installCodeExtension "pkief.material-icon-theme"
        installCodeExtension "shardulm94.trailing-spaces"
        installCodeExtension "usernamehw.errorlens"
        installCodeExtension "visualstudioexptteam.intellicode-api-usage-examples"
        installCodeExtension "visualstudioexptteam.vscodeintellicode"
        installCodeExtension "vue.volar"
        installCodeExtension "waderyan.gitblame"
        installCodeExtension "xabikos.javascriptsnippets"
        installCodeExtension "yoavbls.pretty-ts-errors"
        installCodeExtension "zhuangtongfa.material-theme"
        echo
    fi

    # Regenerate with
    # cat .config/Code/User/settings.json \
    # | grep -E "^  \".+" \
    # | sed 's/  "//g' \
    # | sed 's/": /\t/g' \
    # | sed 's/,$//g' \
    # | grep -v -E "{$" \
    # | awk -F '\t' '{print "updateVSCodeSetting \"" $1 "\" " $2}'

    if utilux-prompt --prompt "Apply custom Visual Studio Code config ?"; then
        backupVSCodeSettings
        updateVSCodeSetting "workbench.iconTheme" "material-icon-theme"
        updateVSCodeSetting "editor.smoothScrolling" true
        updateVSCodeSetting "editor.cursorSmoothCaretAnimation" "on"
        updateVSCodeSetting "workbench.list.smoothScrolling" true
        updateVSCodeSetting "terminal.integrated.smoothScrolling" true
        updateVSCodeSetting "editor.cursorBlinking" "smooth"
        updateVSCodeSetting "editor.fontFamily" "'JetBrains Mono', 'Droid Sans Mono', 'monospace', monospace"
        updateVSCodeSetting "terminal.integrated.fontLigatures.enabled" true
        updateVSCodeSetting "editor.fontLigatures" true
        updateVSCodeSetting "window.zoomLevel" 1
        updateVSCodeSetting "workbench.externalBrowser" "opera"
        updateVSCodeSetting "git.blame.statusBarItem.enabled" false
        updateVSCodeSetting "git.blame.editorDecoration.enabled" false
        updateVSCodeSetting "workbench.colorTheme" "Solarized Autumn"
        updateVSCodeSetting "workbench.editor.empty.hint" "hidden"
        updateVSCodeSetting "git.confirmSync" false
        updateVSCodeSetting "gitlens.graph.scrollMarkers.enabled" false
        updateVSCodeSetting "gitlens.graph.avatars" false
        updateVSCodeSetting "diffEditor.ignoreTrimWhitespace" false
        updateVSCodeSetting "breadcrumbs.symbolPath" "off"
        updateVSCodeSetting "workbench.editor.pinnedTabsOnSeparateRow" true
        updateVSCodeSetting "workbench.editor.highlightModifiedTabs" true
        updateVSCodeSetting "breadcrumbs.icons" false
        updateVSCodeSetting "editor.fontSize" 12
        updateVSCodeSetting "terminal.integrated.fontSize" 11

        echo "VSCode configuration edited !"
    fi
fi



if isInstalled 'gsettings'; then
    if utilux-prompt --prompt "Install custom keyboard shortcuts ?"; then
        register_new_gnome_keyboard_shortcut "utilux-opera" "Utilux - Launch Opera" "opera" "<Super>W"
        register_new_gnome_keyboard_shortcut "utilux-home" "Utilux - Home folder" "nautilus -w '$HOME'" "<Super>F"
        register_new_gnome_keyboard_shortcut "utilux-terminal" "Utilux - Terminal" "gnome-terminal" "<Super>T"
    fi
fi
