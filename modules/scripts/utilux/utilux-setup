#!/bin/bash

installCodeExtention()
{
    local packageName="$1"
    local prettyName="${packageName##*.}"

    if [[ -z "$packageName" ]]; then
        echo -e "\e[31m[ERROR]\e[0m No package name provided."
        return 1
    fi

    local codeOutput
    if ! codeOutput=$(code --install-extension "$packageName" 2>&1); then
        echo -e "\e[31m[FAILED]\e[0m Failed to install $prettyName:"
        echo "$codeOutput"
        return 1
    fi

    if echo "$codeOutput" | grep -q "already installed"; then
        echo -e " - \e[33m[ALREADY]\e[0m $prettyName"
    else
        echo -e " - \e[32m[INSTALLED]\e[0m $prettyName"
    fi
}

isInstalled()
{
    local package="$1"

    if dpkg -s "$package" >/dev/null 2>&1; then
        return 0 
    fi

    if command -v "$package" >/dev/null 2>&1; then
        return 0
    fi

    return 1
}

checkInstalled() {
    local package="$1"

    if isInstalled "$package"; then
        echo -e " - \e[32m[OK]\e[0m $package"
    else
        if apt-cache show "$package" >/dev/null 2>&1; then
            echo -e " - \e[31m[MISSING]\e[0m $package (→ sudo apt-get install $package)"
        else
            echo -e " - \e[31m[MISSING]\e[0m $package (→ manual installation required)"
        fi
    fi
    echo -ne "\e[0m"
}


updateVSCodeSetting() {
    local key="$1"
    local value="$2"
    local settings_path="$HOME/.config/Code/User/settings.json"

    [ ! -f "$settings_path" ] && echo "{}" > "$settings_path"

    if [[ "$value" =~ ^(true|false|[0-9]+)$ ]]; then
        json_value="$value"
    else
        json_value="\"$value\""
    fi

    tmp=$(mktemp)
    jq --arg key "$key" --argjson val "$json_value" '. + {($key): $val}' "$settings_path" > "$tmp" && mv "$tmp" "$settings_path"
}

backupVSCodeSettings() {
    local settings="$HOME/.config/Code/User/settings.json"
    local backup_base="${settings}.bak"
    local backup="$backup_base"

    if [ ! -f "$settings" ]; then
        return 1
    fi

    echo "Making backup of your VSCode Config !"

    local i=1
    while [ -f "$backup" ]; do
        backup="${backup_base}.${i}"
        ((i++))
    done

    cp "$settings" "$backup"
}

echo "Languages/tools to install";
checkInstalled "jq";
checkInstalled "git";
checkInstalled "php";
checkInstalled "composer"
checkInstalled "sqlite3";
checkInstalled "nodejs";
checkInstalled "npm";
checkInstalled "docker";
checkInstalled "docker-compose-plugin";
echo

echo "Software to install";
checkInstalled "filezilla";
checkInstalled "code";
checkInstalled "firefox";
checkInstalled "ffmpeg";
echo

echo "Office Softwares"
checkInstalled "libreoffice";
checkInstalled "gimp";
checkInstalled "inkscape";
echo

echo "DVD/Music Utilities"
checkInstalled "easytag";
checkInstalled "asunder";
echo


if isInstalled 'code'; then

    read -p "Install VSCode Extensions ? (y/n) " confirm
    echo

    if [[ "$confirm" =~ ^[Yy]$ ]]; then

        echo "Checking code extensions..."
        installCodeExtention "adpyke.vscode-sql-formatter"
        installCodeExtention "antfu.goto-alias"
        installCodeExtention "bmewburn.vscode-intelephense-client"
        installCodeExtention "bradlc.vscode-tailwindcss"
        installCodeExtention "dbaeumer.vscode-eslint"
        installCodeExtention "eamodio.gitlens"
        installCodeExtention "github.copilot"
        installCodeExtention "github.copilot-chat"
        installCodeExtention "github.github-vscode-theme"
        installCodeExtention "gruntfuggly.todo-tree"
        installCodeExtention "irongeek.vscode-env"
        installCodeExtention "johnpapa.vscode-peacock"
        installCodeExtention "mechatroner.rainbow-csv"
        installCodeExtention "mhutchie.git-graph"
        installCodeExtention "ms-azuretools.vscode-docker"
        installCodeExtention "ms-python.debugpy"
        installCodeExtention "ms-python.python"
        installCodeExtention "ms-python.vscode-pylance"
        installCodeExtention "ms-vscode-remote.remote-containers"
        installCodeExtention "mujichok.vscode-project-name-in-statusbar"
        installCodeExtention "nuxt.mdc"
        installCodeExtention "nuxtr.nuxt-vscode-extentions"
        installCodeExtention "nuxtr.nuxtr-vscode"
        installCodeExtention "pkief.material-icon-theme"
        installCodeExtention "shardulm94.trailing-spaces"
        installCodeExtention "usernamehw.errorlens"
        installCodeExtention "visualstudioexptteam.intellicode-api-usage-examples"
        installCodeExtention "visualstudioexptteam.vscodeintellicode"
        installCodeExtention "vue.volar"
        installCodeExtention "xabikos.javascriptsnippets"
        installCodeExtention "yoavbls.pretty-ts-errors"
        installCodeExtention "zhuangtongfa.material-theme"

        echo
    fi


    read -p "Apply custom VSCode config ? (y/n) " confirm
    echo

    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        backupVSCodeSettings
        updateVSCodeSetting "workbench.colorTheme" "GitHub Light"
        updateVSCodeSetting "workbench.iconTheme" "material-icon-theme"
        updateVSCodeSetting "editor.smoothScrolling" true
        updateVSCodeSetting "editor.cursorSmoothCaretAnimation" "on"
        updateVSCodeSetting "workbench.list.smoothScrolling" true
        updateVSCodeSetting "terminal.integrated.smoothScrolling" true
        updateVSCodeSetting "editor.cursorBlinking" "smooth"
        updateVSCodeSetting "editor.fontFamily" "'JetBrains Mono', 'Droid Sans Mono', 'monospace', monospace"
        updateVSCodeSetting "terminal.integrated.fontLigatures.enabled" true
        updateVSCodeSetting "editor.fontLigatures" true
        updateVSCodeSetting "window.zoomLevel" 1
        updateVSCodeSetting "workbench.externalBrowser" "firefox"
        updateVSCodeSetting "git.blame.statusBarItem.enabled" false
        updateVSCodeSetting "git.blame.editorDecoration.enabled" false
        echo "VSCode configuration edited !"
    fi
fi