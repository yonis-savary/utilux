#!/bin/sh

if [ -z "$(which sshfs)" ]; then 
    echo "Mounting ssh directories require sshfs package"
    echo "You can install it with : sudo apt-get install sshfs"
    exit 1
fi

if ! cat /etc/fuse.conf | grep -q user_allow_other; then 
    echo "Adding user_allow_other to your fuse.conf"
    echo "user_allow_other" | sudo tee -a /etc/fuse.conf
fi


echo "Remote user [$USER] ? "
read remote_user
[ -z "$remote_user" ] && remote_user="$USER"

given_host_is_valid="0"
while [ "$given_host_is_valid" = "0" ]; do
    echo "Remote host ? "
    read remote_host

    if [ -z "$remote_host" ]; then
        echo "Error: please provide a valid host"
        given_host_is_valid="0"
    else
        echo "Pinging $remote_host"
        if ping -c 1 "$remote_host" > /dev/null
        then
            echo "Success !"
            given_host_is_valid="1"
        else
            echo "Could not ping $remote_host"
        fi
    fi
done


ssh_key_path=""
possible_ssh_key="$HOME/.ssh/$remote_host"
if [ -f "$possible_ssh_key" ]; then
    if utilux-prompt --prompt "A SSH Key was found for $remote_host, do you wish to use it ?"; then
        ssh_key_path="$possible_ssh_key"
    fi
fi

while [ -z "$ssh_key_path" ]; do
    echo "New SSH Key Name [$remote_host] ? "
    read ssh_key_name
    [ -z "$ssh_key_name" ] && ssh_key_name="$remote_host"

    possible_ssh_key="$HOME/.ssh/$ssh_key_name"
    if [ -f "$possible_ssh_key" ]; then
        if utilux-prompt --prompt "$possible_ssh_key key already exists, do you wish to use it ?"; then
            ssh_key_path="$possible_ssh_key"
        fi
    else
        utilux-ssh add "$ssh_key_name"
        ssh_key_path="$HOME/.ssh/$ssh_key_name"
        if [ ! -f "$ssh_key_path" ]; then
            echo "Error : could not generate a SSH Key"
            exit 1
        fi
    fi
done
echo "Using ssh key $ssh_key_path"

public_ssh_key_path="$ssh_key_path.pub"

if [ ! -f "$public_ssh_key_path" ]; then
    echo "Error: public key $public_ssh_key_path does not exists"
    exit 1
fi

connect_url="$remote_user@$remote_host"


echo "Copying public key to server"
if ! ssh-copy-id -i "$public_ssh_key_path" "$connect_url"; then
    echo "Error: could not add SSH key to server"
    exit 1
fi



target_path=""

while [ -z "$target_path" ]; do
    suggested_target_path="/home/$remote_user"
    echo "Target path on server [$suggested_target_path] ? "
    read target_path
    [ -z "$target_path" ] && target_path="$suggested_target_path"

    output=$(ssh -t "$connect_url" "[ -d $target_path ] && echo -n '1' || echo -n '0'")
    if [ ! $output = "1" ]; then
        echo "Error: distant directory $target_path does not exists"
        target_path=""
    fi
done
echo "Using distant directory : $target_path"



local_path=""
while [ -z "$local_path" ]; do
    suggested_local_path="/mnt/$remote_host"
    echo "Local mount point (must exists) [$suggested_local_path] ? "
    read local_path
    [ -z "$local_path" ] && local_path="$suggested_local_path"

    if [ ! -d "$local_path" ]; then
        echo "Error: local directory $local_path does not exists"
        local_path=""
    elif grep -vE '^(#|$)' /etc/fstab | awk '!/nfs|cifs|smbfs|tmpfs|proc|sysfs|devpts|swap|overlay/ { print $2 }' | grep "$local_path"; then 
        echo "Error: local directory $local_path is already a mount point !"
        local_path=""
    fi
done

echo "Making a backup of /etc/fstab"

fstab_file="/etc/fstab"
backup_base="./fstab.bak"
backup="$backup_base"

if [ ! -f "$fstab_file" ]; then
    echo "/etc/fstab does not exists"
    exit 1
fi

echo "Making backup of your VSCode Config !"

i=1
while [ -f "$backup" ]; do
    backup="${backup_base}.${i}"
    i=$(expr "$i" + 1)
done

cp "$fstab_file" "$backup"

echo "Made a backup file at $backup"

local_user_uid=$(id -u)
local_user_gid=$(id -g)

mount_entry="$remote_user@$remote_host:$target_path $local_path fuse.sshfs _netdev,IdentityFile=$ssh_key_path,users,idmap=user,allow_other,default_permissions,uid=$local_user_uid,gid=$local_user_gid 0 0"


mount_entries=$(cat <<EOF
# Generated by utilux-mount-ssh, to remove: first "sudo umount "$local_path" " then remove this line
$mount_entry

EOF
)

echo "$mount_entries" | sudo tee -a /etc/fstab 

echo "Mount point added to your fstab file"

sudo mount "$local_path"

nohup nautilus -w "$local_path" > /dev/null 2>&1 &